------------------------------
-- Schema
------------------------------
-- We want to disable most privileges for public users. The halfleap schema is where most
-- of the data lives. This makes it easier to limit permissions and also allows us to use
-- the public schema for views only, which can be programmatically created and dropped.
create schema if not exists halfleap;

-- Finer-grained permissions for the halfleap schema are set below.
grant usage on schema halfleap to authenticated;

------------------------------
-- Tables
------------------------------
create table halfleap.adapters
(
    id       uuid primary key     default gen_random_uuid(),
    name     text unique not null,
    added_at timestamptz not null default now()
);

create table halfleap.events
(
    id         bigint generated by default as identity not null,
    created_at timestamptz                             not null default now(),
    url        text                                    not null,
    message    text                                    not null,
    source     uuid                                    not null references halfleap.adapters (id)
);

create table halfleap.locations
(
    id          uuid primary key default gen_random_uuid(),
    coordinates point   not null,
    is_exact    boolean not null,
    is_private  boolean not null default true
);

create table halfleap.contacts
(
    id             uuid primary key     default gen_random_uuid(),
    first_name     text        not null,
    last_name      text        not null,
    email          text unique not null,
    disambiguation text unique,
    met_at_id      uuid references halfleap.locations (id),
    lives_in_id    uuid references halfleap.locations (id),
    birth_date     date,
    nationality    text,
    created_at     timestamptz not null default now(),

    -- This is a special column that's used to identify the owner of the Halfleap account.
    is_me          boolean     not null default true,

    unique (first_name, last_name, birth_date, nationality, disambiguation)
);
create unique index only_one_owner on halfleap.contacts (is_me) where is_me;
comment on index halfleap.only_one_owner is 'Only one contact can be the owner of the Halfleap account.';

create table halfleap.shared_locations
(
    location_id uuid references halfleap.locations (id),
    contact_id  uuid references halfleap.contacts (id),
    primary key (location_id, contact_id)
);
comment on table halfleap.shared_locations is 'Contacts who are allowed to see a location.';

create table halfleap.notes
(
    id         uuid primary key     default gen_random_uuid(),
    content    text        not null default '',
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    is_private boolean     not null default true
);

create table halfleap.shared_notes
(
    note_id    uuid references halfleap.notes (id),
    contact_id uuid references halfleap.contacts (id),
    primary key (note_id, contact_id)
);
comment on table halfleap.shared_notes is 'Contacts who are allowed to see a note.';

create table halfleap.resources
(
    id         uuid primary key     default gen_random_uuid(),
    url        text        not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    is_private boolean     not null default true
);

create table halfleap.shared_resources
(
    resource_id uuid references halfleap.resources (id),
    contact_id  uuid references halfleap.contacts (id),
    primary key (resource_id, contact_id)
);
comment on table halfleap.shared_resources is 'Contacts who are allowed to see a resource.';


-- Functions & Triggers

create function halfleap.create_new_contact() returns trigger as
$$
begin
    insert into halfleap.contacts (first_name, last_name, email)
    values ((coalesce((string_to_array(new.raw_user_meta_data ->> 'full_name', ' '))[1],
                      '')),
            (coalesce((string_to_array(new.raw_user_meta_data ->> 'full_name', ' '))[2],
                      '')),
            new.email);
    return new;
end;
$$ language plpgsql;


create trigger on_auth_user_created
    after insert
    on auth.users
    for each row
execute procedure halfleap.create_new_contact();


create or replace function update_timestamptz()
    returns trigger as
$$
begin
    NEW.updated_at = now();
    return NEW;
end;
$$ language 'plpgsql';


create trigger notes_updated_at_timestamptz
    before update
    on halfleap.notes
    for each row
execute procedure
    update_timestamptz();


create trigger resources_updated_at_timestamptz
    before update
    on halfleap.resources
    for each row
execute procedure
    update_timestamptz();


-- Privileges and Policies

-- Enable RLS to deny access by default.
alter table halfleap.events
    enable row level security;
alter table halfleap.adapters
    enable row level security;
alter table halfleap.contacts
    enable row level security;
alter table halfleap.locations
    enable row level security;
alter table halfleap.notes
    enable row level security;
alter table halfleap.resources
    enable row level security;

-- Policies

create policy "Enable open access to public locations" on halfleap.locations
    for select
    using (is_private = false);

create policy "Enable contacts to see locations shared with them" on halfleap.locations
    for select
    using (auth.uid() = (select contact_id
                         from halfleap.shared_locations));

create policy "Enable open access to public notes" on halfleap.notes
    for select
    using (is_private = false);

create policy "Enable contacts to see notes shared with them" on halfleap.notes
    for select
    using (auth.uid() = (select halfleap.shared_notes.contact_id
                         from halfleap.shared_notes));

create policy "Enable open access to public resources" on halfleap.resources
    for select
    using (is_private = false);

create policy "Enable contacts to see resources shared with them" on halfleap.resources
    for select
    using (auth.uid() = (select halfleap.shared_resources.contact_id
                         from halfleap.shared_resources));


-- Allow the the account owner full privileges on all tables.

create policy "Allow the account owner full access to their adapters" on halfleap.adapters
    for all
    using (auth.uid() = (select id
                         from halfleap.contacts
                         where is_me = true));

create policy "Allow the account owner full access to their contacts" on halfleap.contacts
    for all
    using (auth.uid() = (select id
                         from halfleap.contacts
                         where is_me = true));

create policy "Allow the account owner full access to their locations" on halfleap.locations
    for all
    using (auth.uid() = (select id
                         from halfleap.contacts
                         where is_me = true));

create policy "Allow the account owner full access to their notes" on halfleap.notes
    for all
    using (auth.uid() = (select id
                         from halfleap.contacts
                         where is_me = true));

create policy "Allow the account owner full access to their resources" on halfleap.resources
    for all
    using (auth.uid() = (select id
                         from halfleap.contacts
                         where is_me = true));
